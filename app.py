import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import plotly.express as px
from datetime import datetime, timedelta
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import PolynomialFeatures
from sklearn.metrics import mean_absolute_error, mean_squared_error
import io

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤",
    page_icon="üìà",
    layout="wide"
)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
def moving_average_forecast(data, window=7, forecast_days=30):
    """–ü—Ä–æ–≥–Ω–æ–∑ –º–µ—Ç–æ–¥–æ–º —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ —Å—Ä–µ–¥–Ω–µ–≥–æ"""
    ma = data.rolling(window=window).mean().iloc[-1]
    last_date = data.index[-1]
    future_dates = [last_date + timedelta(days=i) for i in range(1, forecast_days + 1)]
    forecast = pd.Series([ma] * forecast_days, index=future_dates)
    return forecast

def linear_regression_forecast(data, forecast_days=30):
    """–ü—Ä–æ–≥–Ω–æ–∑ –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–µ–π"""
    X = np.array(range(len(data))).reshape(-1, 1)
    y = data.values
    
    model = LinearRegression()
    model.fit(X, y)
    
    future_X = np.array(range(len(data), len(data) + forecast_days)).reshape(-1, 1)
    forecast_values = model.predict(future_X)
    
    last_date = data.index[-1]
    future_dates = [last_date + timedelta(days=i) for i in range(1, forecast_days + 1)]
    forecast = pd.Series(forecast_values, index=future_dates)
    
    return forecast

def polynomial_regression_forecast(data, degree=2, forecast_days=30):
    """–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–µ–π"""
    X = np.array(range(len(data))).reshape(-1, 1)
    y = data.values
    
    poly = PolynomialFeatures(degree=degree)
    X_poly = poly.fit_transform(X)
    
    model = LinearRegression()
    model.fit(X_poly, y)
    
    future_X = np.array(range(len(data), len(data) + forecast_days)).reshape(-1, 1)
    future_X_poly = poly.transform(future_X)
    forecast_values = model.predict(future_X_poly)
    
    last_date = data.index[-1]
    future_dates = [last_date + timedelta(days=i) for i in range(1, forecast_days + 1)]
    forecast = pd.Series(forecast_values, index=future_dates)
    
    return forecast

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö
def calculate_metrics(actual, predicted):
    """–†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞"""
    mae = mean_absolute_error(actual, predicted)
    rmse = np.sqrt(mean_squared_error(actual, predicted))
    mape = np.mean(np.abs((actual - predicted) / actual)) * 100
    return mae, rmse, mape

def detect_anomalies(data, std_threshold=2):
    """–î–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–π"""
    mean = np.mean(data)
    std = np.std(data)
    threshold = std_threshold * std
    anomalies = data[np.abs(data - mean) > threshold]
    return anomalies

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
def main():
    st.title("üìà –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤")
    
    # –°–∞–π–¥–±–∞—Ä –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    st.sidebar.title("–ù–∞–≤–∏–≥–∞—Ü–∏—è")
    page = st.sidebar.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É:", [
        "–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ", 
        "–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥–∞–∂", 
        "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞",
        "–ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞"
    ])
    
    # –°—Ç—Ä–∞–Ω–∏—Ü–∞ 1: –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ
    if page == "–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ":
        st.header("üìä –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
        uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª", type=['csv'])
        
        if uploaded_file is not None:
            try:
                # –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
                df = pd.read_csv(uploaded_file)
                df['date'] = pd.to_datetime(df['date'])
                df = df.set_index('date')
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
                if 'value' not in df.columns:
                    st.error("–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫—É 'value'")
                    return
                
                # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
                col1, col2, col3, col4 = st.columns(4)
                with col1:
                    st.metric("–°—Ä–µ–¥–Ω–µ–µ", f"{df['value'].mean():.2f}")
                with col2:
                    st.metric("–ú–∏–Ω–∏–º—É–º", f"{df['value'].min():.2f}")
                with col3:
                    st.metric("–ú–∞–∫—Å–∏–º—É–º", f"{df['value'].max():.2f}")
                with col4:
                    st.metric("–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ", f"{df['value'].std():.2f}")
                
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞
                st.subheader("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞")
                col1, col2 = st.columns(2)
                with col1:
                    forecast_method = st.selectbox(
                        "–ú–µ—Ç–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è:",
                        ["–õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è", "–ü–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è", "–°–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ"]
                    )
                    forecast_days = st.slider("–î–Ω–µ–π –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞:", 7, 90, 30)
                
                with col2:
                    if forecast_method == "–ü–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è":
                        degree = st.slider("–°—Ç–µ–ø–µ–Ω—å –ø–æ–ª–∏–Ω–æ–º–∞:", 2, 5, 2)
                    elif forecast_method == "–°–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ":
                        window = st.slider("–û–∫–Ω–æ —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ —Å—Ä–µ–¥–Ω–µ–≥–æ:", 3, 30, 7)
                
                # –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ
                if st.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑"):
                    with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞..."):
                        if forecast_method == "–õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è":
                            forecast = linear_regression_forecast(df['value'], forecast_days)
                        elif forecast_method == "–ü–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è":
                            forecast = polynomial_regression_forecast(df['value'], degree, forecast_days)
                        else:
                            forecast = moving_average_forecast(df['value'], window, forecast_days)
                        
                        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
                        fig = go.Figure()
                        fig.add_trace(go.Scatter(
                            x=df.index, y=df['value'],
                            name='–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
                            line=dict(color='blue')
                        ))
                        fig.add_trace(go.Scatter(
                            x=forecast.index, y=forecast.values,
                            name='–ü—Ä–æ–≥–Ω–æ–∑',
                            line=dict(color='red', dash='dash')
                        ))
                        fig.update_layout(
                            title="–ü—Ä–æ–≥–Ω–æ–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞",
                            xaxis_title="–î–∞—Ç–∞",
                            yaxis_title="–ó–Ω–∞—á–µ–Ω–∏–µ"
                        )
                        st.plotly_chart(fig, use_container_width=True)
                        
                        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                        forecast_df = pd.DataFrame({
                            'date': forecast.index,
                            'value': forecast.values
                        })
                        csv = forecast_df.to_csv(index=False)
                        st.download_button(
                            label="üì• –°–∫–∞—á–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ (CSV)",
                            data=csv,
                            file_name="forecast.csv",
                            mime="text/csv"
                        )
                        
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
    
    # –°—Ç—Ä–∞–Ω–∏—Ü–∞ 2: –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥–∞–∂
    elif page == "–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥–∞–∂":
        st.header("üè™ –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥–∞–∂ –º–∞–≥–∞–∑–∏–Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏")
        
        if st.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–∂"):
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
            start_date = datetime(2024, 1, 1)
            dates = [start_date + timedelta(days=i) for i in range(180)]
            
            base_sales = 50
            trend = 0.2
            noise_std = 10
            
            sales_data = []
            for i, date in enumerate(dates):
                day_of_week = date.weekday()
                
                # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–¥–∞–∂–∏ + —Ç—Ä–µ–Ω–¥
                daily_sales = base_sales + (trend * i)
                
                # –°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å
                if day_of_week == 4:  # –ü—è—Ç–Ω–∏—Ü–∞
                    daily_sales *= 1.2
                elif day_of_week == 6:  # –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
                    daily_sales *= 0.7
                
                # –°–ª—É—á–∞–π–Ω—ã–π —à—É–º
                daily_sales += np.random.normal(0, noise_std)
                daily_sales = max(0, daily_sales)  # –ü—Ä–æ–¥–∞–∂–∏ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏
                
                sales_data.append(daily_sales)
            
            df_sales = pd.DataFrame({
                'date': dates,
                'sales': sales_data,
                'day_of_week': [date.weekday() for date in dates],
                'day_name': [date.strftime('%A') for date in dates]
            })
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ CSV
            df_sales.to_csv('sales_data.csv', index=False)
            st.success("–î–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–∂ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ sales_data.csv")
            
            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –Ω–µ–¥–µ–ª—è–º
            df_sales['week'] = df_sales['date'].dt.isocalendar().week
            weekly_sales = df_sales.groupby('week')['sales'].sum().reset_index()
            
            fig_weekly = px.line(weekly_sales, x='week', y='sales', 
                               title="–ü—Ä–æ–¥–∞–∂–∏ –ø–æ –Ω–µ–¥–µ–ª—è–º")
            st.plotly_chart(fig_weekly, use_container_width=True)
            
            # –ê–Ω–∞–ª–∏–∑ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
            st.subheader("üìà –ê–Ω–∞–ª–∏–∑ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏")
            daily_stats = df_sales.groupby('day_name')['sales'].agg(['mean', 'std']).reset_index()
            
            fig_daily = px.bar(daily_stats, x='day_name', y='mean',
                             error_y='std', title="–°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏")
            st.plotly_chart(fig_daily, use_container_width=True)
            
            # –û–±—â–∏–π —Ç—Ä–µ–Ω–¥
            st.subheader("üìä –û–±—â–∏–π —Ç—Ä–µ–Ω–¥")
            X = np.array(range(len(df_sales))).reshape(-1, 1)
            y = df_sales['sales'].values
            model = LinearRegression()
            model.fit(X, y)
            trend_slope = model.coef_[0]
            
            col1, col2 = st.columns(2)
            with col1:
                st.metric("–¢—Ä–µ–Ω–¥ (–ø—Ä–æ–¥–∞–∂ –≤ –¥–µ–Ω—å)", f"{trend_slope:.3f}")
            
            # –°–∞–º—ã–µ —É—Å–ø–µ—à–Ω—ã–µ –∏ –Ω–µ—É—Å–ø–µ—à–Ω—ã–µ –¥–Ω–∏
            best_day = df_sales.loc[df_sales['sales'].idxmax()]
            worst_day = df_sales.loc[df_sales['sales'].idxmin()]
            
            with col2:
                st.metric("–°–∞–º—ã–π —É—Å–ø–µ—à–Ω—ã–π –¥–µ–Ω—å", 
                         f"{best_day['sales']:.1f} ({best_day['date'].strftime('%Y-%m-%d')})")
                st.metric("–°–∞–º—ã–π –Ω–µ—É—Å–ø–µ—à–Ω—ã–π –¥–µ–Ω—å", 
                         f"{worst_day['sales']:.1f} ({worst_day['date'].strftime('%Y-%m-%d')})")
            
            # –î–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–π
            st.subheader("üö® –î–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–π")
            anomalies = detect_anomalies(df_sales['sales'])
            
            if len(anomalies) > 0:
                st.write(f"–ù–∞–π–¥–µ–Ω–æ –∞–Ω–æ–º–∞–ª–∏–π: {len(anomalies)}")
                anomaly_dates = df_sales.loc[anomalies.index, ['date', 'sales']]
                st.dataframe(anomaly_dates)
            else:
                st.info("–ê–Ω–æ–º–∞–ª–∏–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
    
    # –°—Ç—Ä–∞–Ω–∏—Ü–∞ 3: –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
    elif page == "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞":
        st.header("üîç –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤")
        
        uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞", type=['csv'])
        
        if uploaded_file is not None:
            df = pd.read_csv(uploaded_file)
            df['date'] = pd.to_datetime(df['date'])
            df = df.set_index('date')
            
            if 'value' not in df.columns:
                st.error("–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫—É 'value'")
                return
            
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            st.subheader("üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö")
            fig_dist = px.histogram(df, x='value', title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π")
            st.plotly_chart(fig_dist, use_container_width=True)
            
            # –ê–≤—Ç–æ–∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è
            st.subheader("üîÑ –ê–≤—Ç–æ–∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è")
            autocorr = [df['value'].autocorr(lag=i) for i in range(1, 31)]
            fig_acf = px.line(x=range(1, 31), y=autocorr, 
                            title="–ê–≤—Ç–æ–∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è")
            fig_acf.update_layout(xaxis_title="–õ–∞–≥", yaxis_title="–ê–≤—Ç–æ–∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è")
            st.plotly_chart(fig_acf, use_container_width=True)
            
            # –°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å (–µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ)
            if len(df) > 30:
                st.subheader("üìÖ –°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å")
                df['month'] = df.index.month
                df['day_of_week'] = df.index.dayofweek
                
                monthly_avg = df.groupby('month')['value'].mean()
                daily_avg = df.groupby('day_of_week')['value'].mean()
                
                col1, col2 = st.columns(2)
                with col1:
                    fig_monthly = px.bar(monthly_avg, title="–°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º")
                    st.plotly_chart(fig_monthly, use_container_width=True)
                
                with col2:
                    fig_daily = px.bar(daily_avg, title="–°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏")
                    st.plotly_chart(fig_daily, use_container_width=True)
    
    # –°—Ç—Ä–∞–Ω–∏—Ü–∞ 4: –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
    elif page == "–ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞":
        st.header("üìê –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª —Å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ –∏ –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏", 
                                       type=['csv'])
        
        if uploaded_file is not None:
            df = pd.read_csv(uploaded_file)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
            required_cols = ['actual', 'predicted']
            if all(col in df.columns for col in required_cols):
                # –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫
                mae, rmse, mape = calculate_metrics(df['actual'], df['predicted'])
                
                # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –≤ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö
                st.subheader("üìä –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞")
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("MAE", f"{mae:.2f}")
                with col2:
                    st.metric("RMSE", f"{rmse:.2f}")
                with col3:
                    st.metric("MAPE", f"{mape:.2f}%")
                
                # –¢–∞–±–ª–∏—Ü–∞ —Å –æ—à–∏–±–∫–∞–º–∏
                st.subheader("üìã –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –æ—à–∏–±–æ–∫")
                df_errors = df.copy()
                df_errors['error'] = df_errors['actual'] - df_errors['predicted']
                df_errors['abs_error'] = np.abs(df_errors['error'])
                df_errors['ape'] = np.abs(df_errors['error'] / df_errors['actual']) * 100
                
                st.dataframe(df_errors)
                
                # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤
                st.subheader("üìà –ê–Ω–∞–ª–∏–∑ –æ—Å—Ç–∞—Ç–∫–æ–≤")
                fig_residuals = px.scatter(df_errors, x='predicted', y='error',
                                        title="–û—Å—Ç–∞—Ç–∫–∏ vs –ü—Ä–æ–≥–Ω–æ–∑–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è")
                fig_residuals.add_hline(y=0, line_dash="dash", line_color="red")
                st.plotly_chart(fig_residuals, use_container_width=True)
                
            else:
                st.error("–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏ 'actual' –∏ 'predicted'")

if __name__ == "__main__":
    main()